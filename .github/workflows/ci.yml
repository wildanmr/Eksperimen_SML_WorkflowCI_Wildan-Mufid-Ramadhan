name: MLflow CI/CD Pipeline

on:
  push:
    tags:
      - "v*"

env:
  DAGSHUB_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
  DAGSHUB_TOKEN: ${{ secrets.DAGSHUB_TOKEN }}
  MLFLOW_TRACKING_USERNAME: ${{ secrets.DAGSHUB_USERNAME }}
  MLFLOW_TRACKING_PASSWORD: ${{ secrets.DAGSHUB_TOKEN }}
  MLFLOW_TRACKING_URI: https://dagshub.com/wildanmr/SMSML_Wildan-Mufid-Ramadhan.mlflow
  DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
  DOCKER_HUB_TOKEN : ${{ secrets.DOCKER_HUB_TOKEN  }}

jobs:
  train-model:
    runs-on: ubuntu-latest
    
    outputs:
      run-id: ${{ steps.mlflow-run.outputs.run-id }}
      experiment-id: ${{ steps.mlflow-run.outputs.experiment-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install MLflow and dependencies
      run: |
        python -m pip install --upgrade pip
        pip install mlflow[extras]
        pip install conda
        
    - name: Download dataset to MLProject directory
      run: |
        cd MLProject
        curl -L -o diabetes_preprocessed.csv https://github.com/wildanmr/Eksperimen_SML_Wildan-Mufid-Ramadhan/releases/latest/download/diabetes_preprocessed.csv
        ls -la *.csv
    
    - name: Run MLflow Project
      id: mlflow-run
      run: |
        cd MLProject
        
        # Set use_dagshub parameter
        USE_DAGSHUB="${{ github.event.inputs.use_dagshub || 'true' }}"
        
        echo "üöÄ Running MLflow Project with mlflow run..."
        echo "üìä Tracking URI: $MLFLOW_TRACKING_URI"
        echo "üîß Use DagsHub: $USE_DAGSHUB"
        
        # Run MLflow project
        RUN_OUTPUT=$(mlflow run . \
          --experiment-name "CI_Auto_Training" \
          -P use_dagshub=$USE_DAGSHUB \
          --env-manager conda 2>&1)
        
        echo "$RUN_OUTPUT"
        
        # Extract run ID and experiment ID from output
        RUN_ID=$(echo "$RUN_OUTPUT" | grep -oP "Run ID: \K[a-f0-9]+" | tail -n 1)
        EXPERIMENT_ID=$(echo "$RUN_OUTPUT" | grep -oP "Experiment ID: \K[a-f0-9]+" | tail -n 1)
        
        # If extraction fails, try alternative method
        if [ -z "$RUN_ID" ]; then
          echo "üîç Trying alternative method to get run ID..."
          RUN_ID=$(python -c "
          import mlflow
          import os
          mlflow.set_tracking_uri('$MLFLOW_TRACKING_URI')
          try:
              experiment = mlflow.get_experiment_by_name('CI_Auto_Training')
              if experiment:
                  runs = mlflow.search_runs(experiment_ids=[experiment.experiment_id], max_results=1)
                  if not runs.empty:
                      print(runs.iloc[0]['run_id'])
                      print('EXPERIMENT_ID=' + experiment.experiment_id, file=open('/tmp/exp_id.txt', 'w'))
                  else:
                      print('no-run-found')
              else:
                  print('no-experiment-found')
          except Exception as e:
              print(f'error-{e}')
                    ")
          
          if [ -f "/tmp/exp_id.txt" ]; then
            EXPERIMENT_ID=$(cat /tmp/exp_id.txt | grep EXPERIMENT_ID | cut -d'=' -f2)
          fi
        fi
        
        echo "run-id=$RUN_ID" >> $GITHUB_OUTPUT
        echo "experiment-id=$EXPERIMENT_ID" >> $GITHUB_OUTPUT
        
        echo "‚úÖ MLflow run completed"
        echo "üÜî Run ID: $RUN_ID"
        echo "üî¨ Experiment ID: $EXPERIMENT_ID"
    
    - name: Upload artifacts to GitHub
      uses: actions/upload-artifact@v4
      with:
        name: ml-artifacts-${{ github.run_number }}
        path: |
          MLProject/artifacts/
          MLProject/saved_models/
          MLProject/mlruns/
        retention-days: 30
    
    - name: Commit artifacts back to repo
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add MLProject/artifacts/ MLProject/saved_models/ || true
        git commit -m "Add ML training artifacts from mlflow run [skip ci]" || exit 0
        git push || true

  build-docker:
    needs: train-model
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN  }}
    
    - name: Download dataset for Docker build
      run: |
        cd MLProject
        curl -L -o diabetes_preprocessed.csv https://github.com/wildanmr/Eksperimen_SML_Wildan-Mufid-Ramadhan/releases/latest/download/diabetes_preprocessed.csv
    
    - name: Build and push standard Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./MLProject
        push: true
        tags: |
          ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-model:latest
          ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-model:${{ github.run_number }}
        platforms: linux/amd64,linux/arm64
    
    - name: Install MLflow for Docker build
      run: |
        python -m pip install --upgrade pip
        pip install mlflow[extras]
    
    - name: Build MLflow Docker image using mlflow build-docker
      env:
        RUN_ID: ${{ needs.train-model.outputs.run-id }}
        EXPERIMENT_ID: ${{ needs.train-model.outputs.experiment-id }}
      run: |
        echo "üê≥ Building MLflow Docker image..."
        echo "üÜî Using Run ID: $RUN_ID"
        echo "üî¨ Using Experiment ID: $EXPERIMENT_ID"
        
        cd MLProject
        
        if [ "$RUN_ID" != "" ] && [ "$RUN_ID" != "no-run-found" ] && [ "$RUN_ID" != "no-experiment-found" ]; then
          echo "‚úÖ Valid run ID found, building with mlflow build-docker..."
          
          # Build Docker image with MLflow
          mlflow models build-docker \
            -m "runs:/$RUN_ID/best_model" \
            -n "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-mlflow:latest" \
            --enable-mlserver || {
              echo "‚ö†Ô∏è mlflow build-docker failed, creating alternative serving image..."
              
              # Create alternative MLflow serving Dockerfile
              cat > Dockerfile.serving << 'EOF'
              FROM python:3.11-slim

              WORKDIR /app

              # Install system dependencies
              RUN apt-get update && apt-get install -y \
                  gcc \
                  g++ \
                  curl \
                  && rm -rf /var/lib/apt/lists/*

              # Install MLflow and serving dependencies
              RUN pip install mlflow[extras] mlserver mlserver-mlflow

              # Copy requirements and model artifacts
              COPY requirements.txt .
              RUN pip install --no-cache-dir -r requirements.txt

              COPY . .

              # Expose MLflow serving port
              EXPOSE 5000

              # Default command for model serving
              CMD ["mlflow", "models", "serve", "-m", "saved_models", "-h", "0.0.0.0", "-p", "5000"]
              EOF
              
              # Build alternative serving image
              docker build -f Dockerfile.serving -t "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-mlflow:latest" .
            }
          
          # Push the MLflow serving image
          docker push "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-mlflow:latest" || echo "Failed to push mlflow image, but continuing..."
          
        else
          echo "‚ùå No valid run ID found, creating basic serving image..."
          
          # Create basic serving image
          cat > Dockerfile.basic << 'EOF'
          FROM python:3.11-slim
          WORKDIR /app
          COPY requirements.txt .
          RUN pip install --no-cache-dir -r requirements.txt
          RUN pip install mlflow[extras]
          COPY . .
          EXPOSE 5000
          CMD ["python", "-c", "print('MLflow serving image ready. Mount your model and run: mlflow models serve -m <model-path> -h 0.0.0.0 -p 5000')"]
          EOF
          
          docker build -f Dockerfile.basic -t "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-mlflow:latest" .
          docker push "${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-mlflow:latest"
        fi

  deploy-info:
    needs: [train-model, build-docker]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Display deployment info
      env:
        RUN_ID: ${{ needs.train-model.outputs.run-id }}
        EXPERIMENT_ID: ${{ needs.train-model.outputs.experiment-id }}
      run: |
        echo "üéØ ML Pipeline Completed!"
        echo "=========================================="
        echo ""
        echo "üìä MLflow Tracking: https://dagshub.com/wildanmr/SMSML_Wildan-Mufid-Ramadhan.mlflow"
        if [ "$EXPERIMENT_ID" != "" ]; then
          echo "üî¨ Experiment: https://dagshub.com/wildanmr/SMSML_Wildan-Mufid-Ramadhan.mlflow/#/experiments/$EXPERIMENT_ID"
        fi
        if [ "$RUN_ID" != "" ]; then
          echo "üÜî Run: https://dagshub.com/wildanmr/SMSML_Wildan-Mufid-Ramadhan.mlflow/#/experiments/$EXPERIMENT_ID/runs/$RUN_ID"
        fi
        echo ""
        echo "üê≥ Docker Images:"
        echo "   - ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-model:latest"
        echo "   - ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-model:${{ github.run_number }}"
        echo "   - ${{ secrets.DOCKER_HUB_USERNAME }}/diabetes-ml-mlflow:latest"
        echo ""
        echo "üìÅ Artifacts saved to GitHub Actions artifacts"
        echo "üîÑ Training method: mlflow run (MLflow Project)"
        echo "üîÑ Re-training triggered by: ${{ github.event_name }}"